Microsoft (R) Macro Assembler Version 6.11		    12/02/12 11:53:53
linkedlist.asm						     Page 1 - 1


				;************************************************************************************
				; Program Name:  linkedlist.asm
				; Programmer:    Austin Horne
				; Class:         CSCI 2160
				; Date:          December 2, 2012
				; Purpose:
				;    Using linked lists. Allow inserting, removing, intializing, traversing, and
				;	 listing of addresses of nodes in a linked list. Links are maintained 
				;	 appropriately in each method.
				;
				;************************************************************************************
					.486
					.model flat
					include macros.asm
			      C ;************************************************************************************
			      C ; Program Name:	macros.asm
			      C ; Programmer:	Austin Horne
			      C ; Class:		CSCI 2160
			      C ; Purpose:		To use macros, PROTO, and extern directives.
			      C ;
			      C ;************************************************************************************
			      C ExitProcess PROTO stdcall, dwExitCode:DWORD
			      C putstring PROTO stdcall, lpStringTOPrint:dword
			      C getstring PROTO stdcall, lpStringToHoldCharacters:dword, dLength:dword
			      C ascint32  PROTO  stdcall, lpStringToConvert:dword
			      C intasc32 PROTO stdcall, lpStringToHoldASCII:dword, dVal:dword
			      C 
			      C init PROTO stdcall, lpStartNode:dword, lpAvail:dword, lpPred:dword, lpSucc:dword, 
			      C 					num:dword, startnode:dword
			      C getcell PROTO stdcall, lpAvail:dword
			      C findKey PROTO stdcall, startNode:dword, value:dword, lpPred:dword, lpSucc:dword
			      C traverse PROTO stdcall, startNode:dword
			      C insertCell PROTO stdcall, lpStartNode:dword, newcell:dword, pred:dword, succ:dword
			      C removeCell PROTO stdcall, lpStartNode:dword, lpAvail:dword, cell:dword, pred:dword,
			      C 						  succ:dword
			      C listnodes PROTO stdcall, lpStartingAddress:dword
			      C extern putchar:near32
			      C 		
			      C COMMENT!
			      C /************************************************************************************
			      C  * Name: intToAscii
			      C  * Date: 11/14/12
			      C  * Purpose: To convert integer to ascii characters. Invokes the intasc32 method from 
			      C 			convutil201211.obj
			      C  * Parameters:
			      C 		@param lpStringToConvert
			      C 		@param iVal
			      C ************************************************************************************
			      C !
			      C intToAscii macro lpStringToHold, iVal
			      C 	push ebx	;preserve
			      C 	
			      C 	lea ebx, [lpStringToHold]	;ebx ->> address of lpStringToHold
			      C 	INVOKE intasc32, ebx, iVal
			      C 	
			      C 	pop ebx		;restore
			      C endm
			      C COMMENT!
			      C /************************************************************************************
			      C  * Name: asciiToInt
			      C  * Date: 11/9/12
			      C  * Purpose: To convert ascii characters to integer. Invokes the ascint32 method from 
			      C 			convutil201211.obj
			      C  * Parameters:
			      C 		@param lpStringToConvert
			      C 		@param iVal
			      C ************************************************************************************
			      C !
			      C asciiToInt macro lpStringToConvert, iVal
			      C 	push ebx		;preserve registers
			      C 	
			      C 	lea ebx, [lpStringToConvert]	;address of string to convert <-- ebx
			      C 	INVOKE ascint32, ebx
			      C 	mov iVal, eax
			      C 	
			      C 	pop ebx	;restore
			      C endm
			      C 	
			      C COMMENT!
			      C /************************************************************************************
			      C  * Name: getc
			      C  * Date: 11/9/12
			      C  * Purpose: To get a character from the keyboard. Calls the getchar method from 
			      C 			Utility201211.obj
			      C  * Parameters:
			      C 		@param char:byte
			      C ************************************************************************************
			      C !
			      C getc macro char
			      C 	push eax		;preserve register
			      C 	
			      C 	call getchar
			      C 	mov char, al	;get the returned character into the parameter
			      C 	
			      C 	pop eax			;restore register	
			      C endm
			      C 
			      C COMMENT!
			      C /************************************************************************************
			      C  * Name: putc
			      C  * Date: 11/9/12
			      C  * Purpose: To display a character on the screen. Calls the putchar method from 
			      C 			Utility201211.obj
			      C  * Parameters:
			      C 		@param char:byte
			      C ************************************************************************************* 
			      C !
			      C putc macro char 
			      C 	push eax		;preserve eax
			      C 	mov al, char	;;get the character passed into AL for the putchar procedure
			      C 	push eax		;pass parameter to putchar
			      C 	call putchar 
			      C 	add esp, 4		;restore stack pointer
			      C 	pop eax			;restore eax
			      C endm
			      C 
			      C COMMENT!
			      C /************************************************************************************
			      C  * Name: newline
			      C  * Date: 11/9/12
			      C  * Purpose: Use the putc macro to display a carriage return and line feed to move 
			      C  *			output to the next line.
			      C ************************************************************************************
			      C !	
			      C newline macro
			      C 	putc 0Dh		;;carriage return
			      C 	putc 0Ah		;;new line character
			      C endm
			      C 
			      C COMMENT!
			      C /************************************************************************************
			      C  * Name: tab
			      C  * Date: 11/30/12
			      C  * Purpose: Use the putc macro to display a tab character
			      C ************************************************************************************
			      C !
			      C tab macro
			      C 	putc 09h
			      C endm 
			      C 
					.stack 100h
					
 00000020			node	struct
 00000000  00000000			key		dword ?
 00000004  00000018 [			info	byte	24 dup(?)
	    00
	   ]
 0000001C  00000000			next	dword ?
				node	ends

 00000000				.data
					
					
 00000000				.code

				COMMENT !
				/***********************************************************************************
				 * Method Name: init
				 * Method Purpose: 
				 *
				 * Date created: 11/22/2012
				 * Date last modified: 11/29/2012
				 *
				 * Parameters:	@param lpStartNode:dword	[ebp+8]
				 *				@param lpAvail:dword		[ebp+12]
				 *				@param lpPred:dword			[ebp+16]
				 *				@param lpSucc:dword			[ebp+20]
				 *				@param num:dword			[ebp+24]
				 *				@param startnode:dword		[ebp+28]
				 ***********************************************************************************
				 !
 00000000			 init proc stdcall uses ebx ecx edi esi, lpStartNode:dword, lpAvail:dword, 
											 lpPred:dword, lpSucc:dword, num:dword, startnode:dword
				 	
					ASSUME ebx:ptr node
					
 00000007  8B 7D 08			mov edi, lpStartNode
 0000000A  8B 75 0C			mov esi, lpAvail
 0000000D  8B 36			mov esi, [esi]	;get value of avail into esi
					
 0000000F  8B 1F			mov ebx, [edi]	;get startnode into ebx
					
					.WHILE(ebx != -1) ;get last node
 00000013  8B CB				mov ecx, ebx	;save current node
 00000015  8B 5B 1C				mov ebx, [ebx].next	;point to next node; last node at end of loop
					.ENDW
					
 0000001D  8B D9			mov ebx, ecx	;get last node into ebx
 0000001F  89 73 1C			mov [ebx].next, esi	;move beginning of avail to next node of last node
 00000022  8B 75 0C			mov esi, lpAvail
 00000025  8B 1F			mov ebx, [edi]
 00000027  89 1E			mov [esi], ebx		;move start node to beginning of avail
 00000029  BE FFFFFFFF			mov esi, -1
 0000002E  89 37			mov [edi], esi		;put -1 into start node
					
					ret 24		;6 dword params
 00000035  C2 0018		 init endp
 00000038			 
				 COMMENT !
				 /***********************************************************************************
				 * Method Name: listnodes
				 * Method Purpose:  
				 *
				 * Date created: 11/24/2012
				 * Date last modified: 11/29/2012
				 *
				 * Parameters:	
				 *		@param lpStartingAddress:dword	[ebp+8]
				 ***********************************************************************************
				 !
				 
				 listnodes proc stdcall uses ebx ecx esi, lpStartingAddress:dword
 00000038				LOCAL _strOut[24]:byte		;local storage for string printing
					
					xor ebx, ebx
 00000041  33 DB			ASSUME ebx:ptr node			;ebx --> a node structure
					
					mov ebx, lpStartingAddress	;starting address of node structure
 00000043  8B 5D 08			
					.WHILE ( ebx != -1 )	;traverse until -1 found in next field
						newline		;macro
						
 00000048  50		     2		push eax		
 00000049  B0 0D	     2		mov al, 0Dh	
 0000004B  50		     2		push eax		
 0000004C  E8 00000000 E     2		call putchar 
 00000051  83 C4 04	     2		add esp, 4		
 00000054  58		     2		pop eax			;restore eax
 00000055  50		     2		push eax		
 00000056  B0 0A	     2		mov al, 0Ah	
 00000058  50		     2		push eax		
 00000059  E8 00000000 E     2		call putchar 
 0000005E  83 C4 04	     2		add esp, 4		
 00000061  58		     2		pop eax			;restore eax
						INVOKE intasc32, addr _strOut, ebx	;convert address to string for printing
						INVOKE putstring, addr _strOut
						
						mov ebx, [ebx].next		;ebx --> next address
 00000075  8B 5B 1C			.ENDW
						
					ret 4	;one dword parameter
				 listnodes endp
 00000081  C2 0004		 
 00000084			 COMMENT !
				/***********************************************************************************
				 * Method Name: getcell
				 * Method Purpose: Return in eax the value of avail. Set avail to the value of 
				 *				   successor of avail.
				 *
				 * Date created: 11/24/2012
				 * Date last modified: 12/1/2012
				 *
				 * Parameters:	
				 *		@param lpAvail:dword	[ebp+8]
				 ***********************************************************************************
				 !
				 
				 getcell proc stdcall uses ebx edi, lpAvail:dword
					
 00000084				ASSUME ebx:ptr node		;ebx --> a node structure
					mov edi, lpAvail		;ebx --> address of avail
					mov ebx, [edi]			;ebx --> first address contained in avail
 00000089  8B 7D 08			
 0000008C  8B 1F			.IF ebx == -1
						mov eax, -1		;return -1 if value of avail is -1
					.ELSE
 00000093  B8 FFFFFFFF				mov eax, ebx	;return value of avail
						mov ebx, [ebx].next		;move value of lpAvail.next into ebx
 0000009A  8B C3				mov edi, lpAvail
 0000009C  8B 5B 1C				mov [edi], ebx		;set value of lpAvail to lpAvail.next
 0000009F  8B 7D 08				
 000000A2  89 1F			.ENDIF
						
					ret	4	;1 dword param
				 getcell endp
				 
 000000A7  C2 0004		 
 000000AA			 COMMENT !
				/***********************************************************************************
				 * Method Name: traverse
				 * Method Purpose: Step through a linked list and display the info and key values
				 *				   of each node.
				 *
				 * Date created: 11/24/2012
				 * Date last modified: 11/29/2012
				 *
				 * Parameters:	
				 *		@param startNode:dword	
				 ***********************************************************************************
				 !
				 traverse PROC stdcall uses ebx esi ecx, startNode:dword	
					LOCAL _strOut[24]:byte		;local storage for string printing

 000000AA				xor ebx, ebx	
					
					ASSUME ebx:ptr node		;ebx --> a node structure	
 000000B3  33 DB			mov ebx, startNode		;ebx -> starting address of first node
					
					.WHILE ( ebx != -1 )	;traverse until -1 found in next field
 000000B5  8B 5D 08				newline		;macro
						mov ecx, [ebx].key	;get key value of current node
						INVOKE intasc32, addr _strOut, ecx
						INVOKE putstring, addr _strOut
 000000BD  50		     2		push eax		
 000000BE  B0 0D	     2		mov al, 0Dh	
 000000C0  50		     2		push eax		
 000000C1  E8 00000000 E     2		call putchar 
 000000C6  83 C4 04	     2		add esp, 4		
 000000C9  58		     2		pop eax			;restore eax
 000000CA  50		     2		push eax		
 000000CB  B0 0A	     2		mov al, 0Ah	
 000000CD  50		     2		push eax		
 000000CE  E8 00000000 E     2		call putchar 
 000000D3  83 C4 04	     2		add esp, 4		
 000000D6  58		     2		pop eax			;restore eax
 000000D7  8B 0B				
						tab 	;macro
						
						INVOKE intasc32, addr _strOut, ebx	;convert address to string for printing
						INVOKE putstring, addr _strOut	
 000000EC  50		     2		push eax		
 000000ED  B0 09	     2		mov al, 09h	
 000000EF  50		     2		push eax		
 000000F0  E8 00000000 E     2		call putchar 
 000000F5  83 C4 04	     2		add esp, 4		
 000000F8  58		     2		pop eax			;restore eax

						tab
						tab
						
						xor esi, esi				;clear esi
 0000010C  50		     2		push eax		
 0000010D  B0 09	     2		mov al, 09h	
 0000010F  50		     2		push eax		
 00000110  E8 00000000 E     2		call putchar 
 00000115  83 C4 04	     2		add esp, 4		
 00000118  58		     2		pop eax			;restore eax
						mov ecx, sizeof node.info	;length of info
 00000119  50		     2		push eax		
 0000011A  B0 09	     2		mov al, 09h	
 0000011C  50		     2		push eax		
 0000011D  E8 00000000 E     2		call putchar 
 00000122  83 C4 04	     2		add esp, 4		
 00000125  58		     2		pop eax			;restore eax
						.WHILE ( esi < ecx )		;print until length of info reached
 00000126  33 F6					putc [ebx].info[esi]
 00000128  B9 00000018					inc esi					;track index of info field
						.ENDW
						
 0000012F  50		     1		push eax		
 00000130  8A 44 1E 04	     1		mov al, [ebx].info[esi]	
 00000134  50		     1		push eax		
 00000135  E8 00000000 E     1		call putchar 
 0000013A  83 C4 04	     1		add esp, 4		
 0000013D  58		     1		pop eax			;restore eax
 0000013E  46					mov ebx, [ebx].next		;ebx --> next address
					.ENDW
					
 00000143  8B 5B 1C			ret 4	;one dword param
				 traverse endp
				 
				 COMMENT !
 00000153  C2 0004		/***********************************************************************************
 00000156			 * Method Name: insertcell
				 * Method Purpose: Insert a given node into a linked list
				 *
				 * Date created: 11/24/2012
				 * Date last modified: 11/29/2012
				 *
				 * Parameters:	
				 *		@param lpStartNode:dword
				 *		@param newcell:dword
				 *		@param pred:dword
				 *		@param succ:dword
				 ***********************************************************************************
				 !
				 insertcell proc stdcall uses ebx ecx edi edx, lpStartNode:dword, newcell:dword,
															pred:dword, succ:dword
					ASSUME ebx:ptr node
					
 00000156				mov edx, lpStartNode	;edx --> lpStartNode
					mov edi, [edx]			;edi --> value of startnode (address of 1st node in list)		
					
					mov ebx, newcell			
 0000015D  8B 55 08			mov edx, [ebx].key		;edx --> key to search for
 00000160  8B 3A			
					invoke findKey, edi, edx, addr pred, addr succ
 00000162  8B 5D 0C			
 00000165  8B 13			mov edx, lpStartNode	;edx --> lpStartNode
					mov edi, [edx]			;edi --> value of startnode (address of 1st node in list)		
					
					mov ebx, newcell			
 00000176  8B 55 08			mov edx, [ebx].key		;edx --> key to search for
 00000179  8B 3A			
					.IF(eax == -1)	;Prevent duplicate keys from being inserted
 0000017B  8B 5D 0C			;if cell is before startnode
 0000017E  8B 13				.IF(pred == -1)
							mov [ebx].next, edi		;set newcell next field to startnode
							mov [edi], ebx			;set startnode to newcell
							
						.ELSEIF(succ == -1)
 0000018B  89 7B 1C				
 0000018E  89 1F					mov ebx, edi
							.WHILE(ebx != -1)	;find last node. ecx will contain last node
								mov ecx, ebx		;save the value of current node in list
								mov ebx, [ebx].next	;find last node in list
 00000198  8B DF					.ENDW	
						
 0000019C  8B CB					mov ebx, ecx	;get last node into ebx 
 0000019E  8B 5B 1C					mov ecx, newcell
							mov [ebx].next, ecx
							mov ebx, ecx	;get new last node into ebx
 000001A6  8B D9					mov ecx, -1
 000001A8  8B 4D 0C					mov [ebx].next, ecx	;value of last node.next will be -1
 000001AB  89 4B 1C					
 000001AE  8B D9				.ELSE
 000001B0  B9 FFFFFFFF					mov ebx, pred	;pred points to an address of a node
 000001B5  89 4B 1C					mov ecx, newcell
							mov [ebx].next, ecx
							mov ebx, ecx	;put newcell in ebx which is pointer to node
 000001BA  8B 5D 10					mov ecx, succ
 000001BD  8B 4D 0C					mov [ebx].next, ecx	;link newcell to end of list
 000001C0  89 4B 1C				.ENDIF
 000001C3  8B D9			.ENDIF
 000001C5  8B 4D 14			
 000001C8  89 4B 1C			ret 8	;2 dword params
				 insertcell endp
				 
				 
				 COMMENT !
 000001D0  C2 0008		/***********************************************************************************
 000001D3			 * Method Name: removecell
				 * Method Purpose: Remove a cell at a specified position from a given list and
				 *				   append it to the beginning of an available list
				 *
				 * Date created: 11/24/2012
				 * Date last modified: 11/29/2012
				 *
				 * Parameters:	
				 *		@param lpStartNode:dword
				 *		@param lpAvail:dword
				 *		@param cell:dword
				 *		@param pred:dword
				 *		@param succ:dword
				 *
				 * Returns:
				 *		eax
				 ***********************************************************************************
				 !
				 removecell proc stdcall uses ebx ecx edi edx esi, lpStartNode:dword, lpAvail:dword,
													 cell:dword, pred:dword, succ:dword	
					ASSUME ebx:ptr node		;ebx --> a node struct
					
					mov edx, lpStartNode	;edx --> lpStartNode
 000001D3				mov edi, [edx]			;edi --> value of startnode (address of 1st node in list)		
					
					mov ebx, cell			
					mov edx, [ebx].key		;edx --> key to search for
 000001DB  8B 55 08			
 000001DE  8B 3A			invoke findKey, edi, edx, addr pred, addr succ
					
 000001E0  8B 5D 10			.IF(eax != -1)	;if key exists in the list, eax will not be -1
 000001E3  8B 13				mov edi, pred			
						.IF(edi == -1)		;if removing first node
							mov esi, lpStartNode ;set esi = ADDRESS of start node
							mov ebx, [esi]		;set ebx = address of beginning node in list
							mov esi, lpAvail	;set esi = ADDRESS of avail
 000001F9  8B 7D 14					mov edx, [esi]		;set edx = address of the first node in avail			
										
 00000201  8B 75 08					mov ecx, [ebx].next	;set ecx to next node in list
 00000204  8B 1E					mov [ebx].next, edx	;set successor to beginning of avail
 00000206  8B 75 0C					mov [esi], ebx		;set beginning of avail to node
 00000209  8B 16					
							mov esi, lpStartNode	
 0000020B  8B 4B 1C					mov [esi], ecx		;set beginning of list to next node
 0000020E  89 53 1C				.ENDIF
 00000211  89 1E				
						mov edi, succ
 00000213  8B 75 08				.IF(edi == -1)	;If removing last node
 00000216  89 0E					mov esi, lpStartNode
							mov ebx, [esi]	;ebx --> beginning of list
							mov edx, [ebx].next	;edx --> next address
 00000218  8B 7D 18					.WHILE(edx != -1)
								mov ecx, ebx	;save current node
 00000220  8B 75 08						mov ebx, [ebx].next
 00000223  8B 1E						mov edx, [ebx].next	;edx --> next node				
 00000225  8B 53 1C					.ENDW
							mov esi, lpAvail
 0000022A  8B CB					mov esi, [esi]	;esi --> beginning address of avail
 0000022C  8B 5B 1C					mov [ebx].next, esi ;next field of node now points to beginning of avail
 0000022F  8B 53 1C					mov [esi], ebx		;node now first in avail
							mov ebx, ecx		;set ebx = next to last node
 00000237  8B 75 0C					mov esi, -1
 0000023A  8B 36					mov [ebx].next, esi
 0000023C  89 73 1C				.ENDIF
 0000023F  89 1E			.ENDIF
 00000241  8B D9			
 00000243  BE FFFFFFFF			ret 20	;5 dword params
 00000248  89 73 1C		 removecell endp
				 
				 COMMENT !
				/***********************************************************************************
				 * Method Name: findKey
 00000251  C2 0014		 * Method Purpose: Search a list for a key. Return the addres of the node that 
 00000254			 *				   contains the key. Set the pred and succ to the corresponding 
				 *				   addresses. Returns -1 if the value is not in the list. If list is
				 *				   empty, return -1 and set pred and succ to -1.
				 *
				 * Date created: 11/24/2012
				 * Date last modified: 11/29/2012
				 *
				 * Parameters:	
				 *		@param startNode:dword	
				 *		@param value:dword
				 *		@param lpPred:dword
				 *		@param lpSucc:dword
				 * Returns:
				 *		eax
				 ***********************************************************************************
				 !
				 findkey proc stdcall uses ebx ecx edi edx esi, startNode:dword, value:dword,  
													lpPred:dword, lpSucc:dword
					xor ebx, ebx
					xor eax, eax
					ASSUME ebx:ptr node	
					mov ebx, startNode		;ebx --> address of start node
 00000254				mov esi, value			;esi contains key to search for
					
 0000025C  33 DB			.IF(ebx == -1)	;check for empty list
 0000025E  33 C0				mov eax, -1			;return -1
						mov edi, lpPred
 00000260  8B 5D 08				mov [edi], eax		;set pred to -1
 00000263  8B 75 0C				mov edi, lpSucc
						mov [edi], eax		;set succ to -1
					.ENDIF
 0000026B  B8 FFFFFFFF			
 00000270  8B 7D 10			.IF(eax == 0 && esi < [ebx].key)	;if the value is less than startnode key
 00000273  89 07				mov eax, -1		;return -1
 00000275  8B 7D 14				mov edi, lpPred
 00000278  89 07				mov [edi], eax		;set pred to -1
						mov edi, lpSucc
						mov [edi], ebx ;set succ to address of startnode		
					.ENDIF
 00000282  B8 FFFFFFFF			
 00000287  8B 7D 10			;loop until end of list is reached
 0000028A  89 07			.WHILE(ebx != -1 && eax == 0)
 0000028C  8B 7D 14				mov edx, [ebx].next		;edx -> address of next cell
 0000028F  89 1F				
						.IF(esi == [ebx].key) ;check for parameter "value" equal to key in list
										
							.IF(ebx == startNode)	;If the key matches startnode key
								mov edi, lpPred		
 00000293  8B 53 1C						mov eax, -1			;set pred to -1
								mov [edi], eax
								mov edi, lpSucc
								mov [edi], edx	;set succ to next address
								
 0000029F  8B 7D 10					.ELSEIF(edx == -1)		;if value matches last node key
 000002A2  B8 FFFFFFFF						mov edi, lpPred
 000002A7  89 07						mov [edi], ecx		;set pred to previous address
 000002A9  8B 7D 14						mov edi, lpSucc
 000002AC  89 17						mov eax, -1
								mov [edi], eax		;set succ to -1; eax contains -1
								
 000002B5  8B 7D 10					.ELSE					;If value matches key in between start and last 
 000002B8  89 0F						mov edi, lpPred		
 000002BA  8B 7D 14						mov [edi], ecx		;set pred to previous key
 000002BD  B8 FFFFFFFF						mov edi, lpSucc
 000002C2  89 07						mov [edi], edx		;set succ to next key; edx contains [ebx].next			
							.ENDIF						
							
 000002C6  8B 7D 10					mov eax, ebx		;key found, set eax to address of current node
 000002C9  89 0F				
 000002CB  8B 7D 14				.ENDIF
 000002CE  89 17						
						mov ecx, ebx			;ecx --> current address; last node if loop ends
						mov ebx, [ebx].next		;ebx --> next address
 000002D0  8B C3			.ENDW
						
						mov ebx, ecx		;ebx --> address of last node
						
 000002D2  8B CB				;if the key to search for is less then key of last node
 000002D4  8B 5B 1C				.IF(esi > [ebx].key && eax == 0) 
							mov edx, -1			
							mov edi, lpPred
 000002E0  8B D9					mov [edi], ecx		;predecessor of this key is last node
							mov edi, lpSucc
							mov [edi], edx		;successor to this key is -1
							mov eax, -1			;return -1
 000002EA  BA FFFFFFFF				.ENDIF	
 000002EF  8B 7D 10
 000002F2  89 0F			.IF(eax == 0)	;check to see if value was in between nodes in list
 000002F4  8B 7D 14				mov ebx, startNode		;ebx --> address of start node
 000002F7  89 17				mov esi, value			;esi contains key to search for
 000002F9  B8 FFFFFFFF				
						;loop until end of list is reached or position key should be in is found
						.WHILE(ebx != -1 && eax != -1)	
							mov edi, ebx			;save address of current node
 00000302  8B 5D 08					mov ebx, [ebx].next		;set ebx = address of next node
 00000305  8B 75 0C					mov ecx, [ebx].key		;set ecx = value of next node's key
							mov ebx, edi			;restore address of current node into ebx
							
							;if key to search for is in between keys in the list
 0000030A  8B FB					.IF(esi > [ebx].key && esi < ecx) 
 0000030C  8B 5B 1C						mov ecx, [ebx].next		;ecx --> address of next node in list
 0000030F  8B 0B						mov edi, lpPred
 00000311  8B DF						mov [edi], ebx			;predecessor set to current node
								mov edi, lpSucc
								mov [edi], ecx		;successor set to next node
								mov eax, -1			
 0000031B  8B 4B 1C					.ENDIF
 0000031E  8B 7D 10				
 00000321  89 1F					mov ecx, ebx			;ecx --> current address; last node if loop ends
 00000323  8B 7D 14					mov ebx, [ebx].next		;ebx --> next address
 00000326  89 0F				.ENDW
 00000328  B8 FFFFFFFF			.ENDIF
					
					ret 16	;4 dword params
 0000032D  8B CB		 findkey endp
 0000032F  8B 5B 1C		 
				 END
				 
				 
				 
 00000342  C2 0010		 
 00000345			 
 
Microsoft (R) Macro Assembler Version 6.11		    12/02/12 11:53:53
linkedlist.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

asciiToInt . . . . . . . . . . .	Proc
getc . . . . . . . . . . . . . .	Proc
intToAscii . . . . . . . . . . .	Proc
newline  . . . . . . . . . . . .	Proc
putc . . . . . . . . . . . . . .	Proc
tab  . . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

node . . . . . . . . . . . . . .	 00000020
  key  . . . . . . . . . . . . .	 00000000	 DWord
  info . . . . . . . . . . . . .	 00000004	 Byte
  next . . . . . . . . . . . . .	 0000001C	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000345 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
findKey  . . . . . . . . . . . .	P Near	 00000254 _TEXT	Length= 000000F1 Public STDCALL
  startNode  . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  lpPred . . . . . . . . . . . .	DWord	 bp + 00000010
  lpSucc . . . . . . . . . . . .	DWord	 bp + 00000014
getcell  . . . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 00000026 Public STDCALL
  lpAvail  . . . . . . . . . . .	DWord	 bp + 00000008
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
init . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000038 Public STDCALL
  lpStartNode  . . . . . . . . .	DWord	 bp + 00000008
  lpAvail  . . . . . . . . . . .	DWord	 bp + 0000000C
  lpPred . . . . . . . . . . . .	DWord	 bp + 00000010
  lpSucc . . . . . . . . . . . .	DWord	 bp + 00000014
  num  . . . . . . . . . . . . .	DWord	 bp + 00000018
  startnode  . . . . . . . . . .	DWord	 bp + 0000001C
insertCell . . . . . . . . . . .	P Near	 00000156 _TEXT	Length= 00000112 Public STDCALL
  lpStartNode  . . . . . . . . .	DWord	 bp + 00000008
  newcell  . . . . . . . . . . .	DWord	 bp + 0000000C
  pred . . . . . . . . . . . . .	DWord	 bp + 00000010
  succ . . . . . . . . . . . . .	DWord	 bp + 00000014
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
listnodes  . . . . . . . . . . .	P Near	 00000038 _TEXT	Length= 0000004C Public STDCALL
  lpStartingAddress  . . . . . .	DWord	 bp + 00000008
  _strOut  . . . . . . . . . . .	Byte	 bp - 00000018
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
removeCell . . . . . . . . . . .	P Near	 000001D3 _TEXT	Length= 00000081 Public STDCALL
  lpStartNode  . . . . . . . . .	DWord	 bp + 00000008
  lpAvail  . . . . . . . . . . .	DWord	 bp + 0000000C
  cell . . . . . . . . . . . . .	DWord	 bp + 00000010
  pred . . . . . . . . . . . . .	DWord	 bp + 00000014
  succ . . . . . . . . . . . . .	DWord	 bp + 00000018
traverse . . . . . . . . . . . .	P Near	 000000AA _TEXT	Length= 000000AC Public STDCALL
  startNode  . . . . . . . . . .	DWord	 bp + 00000008
  _strOut  . . . . . . . . . . .	Byte	 bp - 00000018


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
putchar  . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
